name: AI Test Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'tests/to-be-reviewed-tests/**'
      - 'tests/staging/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-ai-tests:
    runs-on: ubuntu-latest
    # Only run for AI-generated test PRs
    if: contains(github.event.pull_request.labels.*.name, 'ai-generated-test')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Validate Path Guards
        id: path_guard
        run: |
          echo "=== Validating Path Guards ==="
          
          # Get all changed files in this PR
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          echo "Files changed in this PR:"
          echo "$CHANGED_FILES"
          echo ""
          
          # Define allowed paths
          ALLOWED_PATHS="^tests/to-be-reviewed-tests/|^tests/staging/|^logs/ai-test-audit.jsonl"
          
          # Check for violations
          VIOLATIONS=$(echo "$CHANGED_FILES" | grep -v -E "$ALLOWED_PATHS" || true)
          
          if [ -n "$VIOLATIONS" ]; then
            echo "❌ PATH GUARD VIOLATION DETECTED!"
            echo ""
            echo "The following non-test files were modified:"
            echo "$VIOLATIONS"
            echo ""
            echo "AI-generated test PRs can ONLY modify:"
            echo "  - tests/to-be-reviewed-tests/"
            echo "  - tests/staging/"
            echo "  - logs/ai-test-audit.jsonl"
            echo ""
            echo "This PR violates aviation compliance requirements."
            exit 1
          else
            echo "✅ Path guard validation passed"
            echo "All changes are in allowed directories"
          fi

      - name: Validate Test File Structure
        id: structure
        run: |
          echo "=== Validating Test File Structure ==="
          
          # Find all test files in to-be-reviewed-tests
          TEST_FILES=$(find tests/to-be-reviewed-tests -name "*.spec.ts" -o -name "*.test.ts")
          
          if [ -z "$TEST_FILES" ]; then
            echo "⚠️ No test files found in to-be-reviewed-tests/"
            exit 0
          fi
          
          ISSUES_FOUND=0
          
          for TEST_FILE in $TEST_FILES; do
            echo "Checking: $TEST_FILE"
            
            # Check for basic test structure
            if ! grep -q "describe\|test\|it" "$TEST_FILE"; then
              echo "❌ No test blocks found in $TEST_FILE"
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            fi
            
            # Check for imports
            if ! grep -q "^import" "$TEST_FILE"; then
              echo "⚠️ No imports found in $TEST_FILE (might be intentional)"
            fi
            
            # Check for assertions
            if ! grep -q "expect\|assert" "$TEST_FILE"; then
              echo "❌ No assertions found in $TEST_FILE"
              ISSUES_FOUND=$((ISSUES_FOUND + 1))
            fi
            
            echo "✅ $TEST_FILE basic structure valid"
          done
          
          if [ $ISSUES_FOUND -gt 0 ]; then
            echo ""
            echo "❌ Found $ISSUES_FOUND structural issues"
            exit 1
          else
            echo ""
            echo "✅ All test files have valid structure"
          fi

      - name: Lint Test Files
        id: lint
        run: |
          echo "=== Linting AI-Generated Tests ==="
          
          # Run ESLint on test files
          npx eslint tests/to-be-reviewed-tests/ tests/staging/ \
            --ext .ts,.tsx \
            --format stylish || {
              echo "❌ Linting failed"
              echo "Please fix linting errors before merging"
              exit 1
            }
          
          echo "✅ Linting passed"

      - name: Check for Security Issues
        id: security
        run: |
          echo "=== Checking for Security Issues ==="
          
          SECURITY_ISSUES=0
          
          # Check for hardcoded credentials
          if git diff origin/${{ github.base_ref }}...HEAD | grep -iE "(password|api_key|secret|token).*=.*['\"]"; then
            echo "❌ Potential hardcoded credentials found"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for console.log statements
          if git diff origin/${{ github.base_ref }}...HEAD | grep -E "console\.(log|debug|info)"; then
            echo "⚠️ Console statements found (should be removed)"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for debugger statements
          if git diff origin/${{ github.base_ref }}...HEAD | grep "debugger"; then
            echo "❌ Debugger statements found"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          if [ $SECURITY_ISSUES -gt 0 ]; then
            echo ""
            echo "❌ Found $SECURITY_ISSUES security issues"
            echo "Please review and fix before merging"
            exit 1
          else
            echo "✅ No security issues found"
          fi

      - name: Validate Audit Log
        id: audit
        run: |
          echo "=== Validating Audit Log ==="
          
          if [ ! -f "logs/ai-test-audit.jsonl" ]; then
            echo "❌ Audit log file not found"
            echo "Every AI-generated test must have an audit entry"
            exit 1
          fi
          
          # Get the Jira key from PR title
          JIRA_KEY=$(echo "${{ github.event.pull_request.title }}" | grep -oE '[A-Z]+-[0-9]+' || echo "")
          
          if [ -z "$JIRA_KEY" ]; then
            echo "⚠️ Could not extract Jira key from PR title"
            echo "✅ Skipping audit log validation"
            exit 0
          fi
          
          # Check if audit entry exists for this ticket
          if ! grep -q "\"jira_ticket\":\"${JIRA_KEY}\"" logs/ai-test-audit.jsonl; then
            echo "❌ No audit log entry found for ${JIRA_KEY}"
            exit 1
          fi
          
          echo "✅ Audit log entry found for ${JIRA_KEY}"

      - name: Run Tests
        id: test
        run: |
          echo "=== Running AI-Generated Tests ==="
          
          # Run only the tests in to-be-reviewed-tests/
          npm run test:review || {
            echo "❌ Tests failed"
            echo "Please fix test failures before merging"
            exit 1
          }
          
          echo "✅ All tests passed"

      - name: Comment PR Status
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `### ✅ AI Test Validation Passed

            All automated validation checks completed successfully:
            - ✅ Path guards validated (no application code modified)
            - ✅ Test file structure validated
            - ✅ Linting passed
            - ✅ Security checks passed
            - ✅ Audit log validated
            - ✅ Tests executed successfully

            **Ready for Human Review**
            
            Please review using the checklist in \`tests/REVIEW_CHECKLIST.md\`:
            1. Test quality ⭐⭐⭐⭐⭐
            2. Code quality ⭐⭐⭐⭐⭐
            3. Security & safety ⭐⭐⭐⭐⭐
            4. Aviation compliance ⭐⭐⭐⭐⭐
            5. Integration & compatibility ⭐⭐⭐⭐⭐

            Once reviewed and approved, this PR can be merged to integrate the test into the main suite.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

      - name: Comment PR Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `### ❌ AI Test Validation Failed

            Automated validation detected issues that must be fixed before merging.

            **Failed Check:** ${{ job.status }}

            Please review the workflow logs for details:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

            **Common Issues:**
            - Path guard violation (modified non-test files)
            - Test structure issues (missing describe/it blocks)
            - Linting errors
            - Security issues (hardcoded credentials, console.log)
            - Missing audit log entry
            - Test execution failures

            **Next Steps:**
            1. Review the error logs above
            2. Fix the issues locally
            3. Push updates to this branch
            4. Validation will re-run automatically`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

  # Optional: Block merge if validation fails
  require-validation:
    runs-on: ubuntu-latest
    needs: validate-ai-tests
    if: always()
    steps:
      - name: Check Validation Status
        run: |
          if [ "${{ needs.validate-ai-tests.result }}" != "success" ]; then
            echo "❌ AI test validation must pass before merging"
            exit 1
          fi
          echo "✅ Validation passed, PR can be merged"

