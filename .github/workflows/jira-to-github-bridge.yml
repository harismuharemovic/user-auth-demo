name: Jira to GitHub Bridge

on:
  schedule:
    # Check for new Jira tickets every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  sync-jira-tickets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for New Jira Tickets with ai-test Label
        id: check_jira
        env:
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JIRA_DOMAIN: ${{ secrets.JIRA_DOMAIN }}
        run: |
          # Search for ai-test tickets created in last 10 minutes that don't have github-synced label
          JQL="labels = ai-test AND created >= -10m AND labels != github-synced ORDER BY created DESC"
          
          # Encode JQL for URL
          ENCODED_JQL=$(echo "$JQL" | jq -sRr @uri)
          
          # Get tickets from Jira
          RESPONSE=$(curl -s \
            -u "$JIRA_EMAIL:$JIRA_TOKEN" \
            -H "Accept: application/json" \
            "https://$JIRA_DOMAIN/rest/api/3/search?jql=$ENCODED_JQL&maxResults=10")
          
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT
          
          # Count issues
          ISSUE_COUNT=$(echo "$RESPONSE" | jq '.issues | length')
          echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
          
          echo "Found $ISSUE_COUNT new ai-test tickets"

      - name: Create GitHub Issues from Jira Tickets
        if: steps.check_jira.outputs.issue_count > 0
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN: ${{ secrets.JIRA_TOKEN }}
          JIRA_DOMAIN: ${{ secrets.JIRA_DOMAIN }}
        run: |
          RESPONSE='${{ steps.check_jira.outputs.response }}'
          
          # Process each Jira ticket
          echo "$RESPONSE" | jq -c '.issues[]' | while read -r issue; do
            JIRA_KEY=$(echo "$issue" | jq -r '.key')
            SUMMARY=$(echo "$issue" | jq -r '.fields.summary')
            DESCRIPTION=$(echo "$issue" | jq -r '.fields.description // ""')
            JIRA_URL="https://$JIRA_DOMAIN/browse/$JIRA_KEY"
            
            echo "Processing $JIRA_KEY: $SUMMARY"
            
            # Create GitHub issue body
            ISSUE_BODY="## AI Test Request from Jira

**Jira Ticket:** [$JIRA_KEY]($JIRA_URL)

### Requirements

$DESCRIPTION

### Instructions for Claude Code Agent

@claude Please generate a comprehensive test file for this method according to the requirements above.

**Constraints:**
- Only create/modify files in \`tests/staging/\`
- Follow project test patterns
- Ensure test is executable and passes
- Use TypeScript with proper types

**Output:** \`tests/staging/${JIRA_KEY}.spec.ts\`

---
*This issue was automatically created from Jira ticket $JIRA_KEY*"

            # Create GitHub issue
            gh issue create \
              --title "$JIRA_KEY: $SUMMARY" \
              --body "$ISSUE_BODY" \
              --label "ai-test,from-jira" \
              --repo ${{ github.repository }}
            
            # Mark Jira ticket as synced
            curl -s \
              -u "$JIRA_EMAIL:$JIRA_TOKEN" \
              -X PUT \
              -H "Content-Type: application/json" \
              "https://$JIRA_DOMAIN/rest/api/3/issue/$JIRA_KEY" \
              -d '{
                "update": {
                  "labels": [{"add": "github-synced"}]
                }
              }'
            
            echo "âœ… Created GitHub issue for $JIRA_KEY and marked as synced"
          done

