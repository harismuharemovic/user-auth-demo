name: CI - Validation & Auto-Merge (Demo)

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  validate:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Validate Functions
        run: |
          cd functions
          npm ci
          # Add npm test here when tests are available
          # npm test
          echo "‚úÖ Functions validation passed"

      - name: Validate Python Scripts (if any)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Check Python Syntax
        run: |
          # Skip if no scripts directory exists (we removed it)
          if [ -d scripts ]; then
            python -m py_compile scripts/*.py
            echo "‚úÖ Python scripts validation passed"
          else
            echo "‚úÖ No Python scripts to validate"
          fi

      - name: Validate Web Assets
        run: |
          # Check if web files exist
          if [ ! -f web/index.html ]; then
            echo "‚ùå web/index.html not found"
            exit 1
          fi
          if [ ! -f web/styles.css ]; then
            echo "‚ùå web/styles.css not found"
            exit 1
          fi
          if [ ! -f web/script.js ]; then
            echo "‚ùå web/script.js not found"
            exit 1
          fi
          echo "‚úÖ Web assets validation passed"

      - name: Check Firebase Config
        run: |
          # Validate firebase.json structure
          if [ ! -f firebase.json ]; then
            echo "‚ùå firebase.json not found"
            exit 1
          fi
          # Basic JSON validation
          python -m json.tool firebase.json > /dev/null
          echo "‚úÖ Firebase config validation passed"

      - name: Comment PR Status
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `### ‚úÖ CI Validation Passed

            All checks completed successfully:
            - ‚úì Functions validated
            - ‚úì Python scripts validated  
            - ‚úì Web assets validated
            - ‚úì Firebase config validated

            This PR is ready for review and merge. Once merged, automatic deployment will be triggered.`;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('CI Validation')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: message
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

      - name: Comment PR Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const message = `### ‚ùå CI Validation Failed

            Please check the workflow logs for details about what failed.

            Common issues:
            - Missing required files
            - Invalid JSON in configuration files
            - Python syntax errors

            Fix the issues and push a new commit to trigger validation again.`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });

  # DISABLED: No auto-merge for any PRs
  # All PRs require manual review and approval
  auto-merge:
    needs: validate
    runs-on: ubuntu-latest
    if: false  # DISABLED - Manual review required for all PRs

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Skipping approval in demo to avoid self-approval restrictions

      - name: Wait for checks
        run: |
          echo "Waiting 10 seconds for checks to register..."
          sleep 10

      - name: Enable Auto-Merge (Demo)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ü§ñ Auto-merging PR #${{ github.event.pull_request.number }} for demo..."

          # For demo: Skip approval and directly merge (since we created it)
          # Wait a bit for status checks to register
          sleep 5

          # Force merge for demo (bypassing approval requirements)
          gh pr merge ${{ github.event.pull_request.number }} \
            --squash \
            --delete-branch \
            --admin \
            --body "ü§ñ Auto-merged by CI for demo purposes (Jira ‚Üí Claude ‚Üí PR ‚Üí Deploy pipeline)" || {
              echo "Admin merge failed, trying regular merge..."
              # Fallback to regular merge
              gh pr merge ${{ github.event.pull_request.number }} \
                --squash \
                --delete-branch \
                --body "ü§ñ Auto-merged by CI for demo purposes"
            }

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const message = `### ü§ñ Auto-Merge Complete

            This PR has been automatically merged for demo purposes.

            **Demo Pipeline Complete:**
            1. ‚úÖ Code validated
            2. ‚úÖ PR merged to main
            3. ‚û°Ô∏è Deployment triggered

            This demonstrates the complete automated pipeline:
            **Jira ‚Üí Firebase ‚Üí GitHub ‚Üí Claude Code CLI ‚Üí PR ‚Üí Auto-Merge ‚Üí Deploy**`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: message
            });
