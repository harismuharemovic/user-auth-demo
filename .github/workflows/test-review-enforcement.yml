name: Test Review Enforcement - DO-178C Compliance

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]
    # Specifically target to-be-reviewed-tests branch
    branches: [to-be-reviewed-tests]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  enforce-review-requirements:
    runs-on: ubuntu-latest
    # Only run for AI-generated test PRs
    if: |
      contains(github.event.pull_request.labels.*.name, 'ai-generated') ||
      contains(github.event.pull_request.head.ref, 'test-gen/') ||
      contains(github.event.pull_request.labels.*.name, 'lltc')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Disable Auto-Merge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "🚫 Disabling auto-merge for AI-generated test PR"
          
          # Disable auto-merge if it's somehow enabled
          gh pr merge ${{ github.event.pull_request.number }} --disable-auto || echo "Auto-merge already disabled"
          
          echo "✅ Auto-merge disabled - human review required"

      - name: Check for Required Labels
        id: labels
        run: |
          LABELS="${{ join(github.event.pull_request.labels.*.name, ',') }}"
          
          echo "Current labels: $LABELS"
          
          # Check for required labels
          if [[ ! "$LABELS" =~ "do-not-auto-merge" ]]; then
            echo "missing_label=do-not-auto-merge" >> $GITHUB_OUTPUT
          fi

      - name: Add Required Labels
        if: steps.labels.outputs.missing_label != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr edit ${{ github.event.pull_request.number }} \
            --add-label "do-not-auto-merge" \
            --add-label "requires-review" \
            --add-label "do-178c-compliance"

      - name: Set Up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests (Verification)
        id: test
        continue-on-error: true
        run: |
          echo "=== Re-running tests for verification ==="
          npm test -- --run --coverage 2>&1 | tee /tmp/test_verification.txt
          
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "test_status=passed" >> $GITHUB_OUTPUT
          else
            echo "test_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Post Review Checklist Comment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if review comment already exists
          EXISTING_COMMENT=$(gh pr view ${{ github.event.pull_request.number }} --json comments --jq '.comments[] | select(.body | contains("DO-178C LLTC Review Checklist")) | .id' | head -1)
          
          if [ -z "$EXISTING_COMMENT" ]; then
            cat > /tmp/review_comment.md << 'EOF'
          ## ⚠️ DO-178C LLTC Review Checklist - MANDATORY REVIEW REQUIRED
          
          This is an AI-generated test that must undergo human review before integration per DO-178C aerospace software certification standards.
          
          ---
          
          ### 🔒 Auto-Merge Status: **DISABLED**
          This PR cannot be auto-merged. Human approval is required.
          
          ---
          
          ### 📋 Review Instructions for Test Engineer
          
          Please review this LLTC (Low Level Test Case) against the following criteria. **All items must be checked before approval.**
          
          #### 1️⃣ Test Coverage & Adequacy
          - [ ] **Complete Coverage**: Test covers all code paths in the target method
          - [ ] **Branch Coverage**: All conditional branches are tested (if/else, switch, ternary)
          - [ ] **Edge Cases**: Boundary values tested (min, max, zero, empty, null, undefined)
          - [ ] **Error Paths**: Exception handling and error conditions are tested
          - [ ] **Input Validation**: All input validation logic is exercised
          - [ ] **Coverage Target**: Meets or exceeds required coverage percentage (typically 100% for LLTC)
          
          #### 2️⃣ Test Quality & Correctness
          - [ ] **Assertions Valid**: All assertions test correct behavior and expected outcomes
          - [ ] **Mock Accuracy**: Mocked dependencies accurately represent real behavior
          - [ ] **Test Independence**: Tests can run in any order without side effects
          - [ ] **Repeatability**: Tests produce consistent results on repeated execution
          - [ ] **Clear Descriptions**: Test names and descriptions clearly explain what is being tested
          - [ ] **AAA Pattern**: Tests follow Arrange-Act-Assert structure
          - [ ] **No False Positives**: Tests don't pass when they should fail
          - [ ] **No False Negatives**: Tests don't fail when they should pass
          
          #### 3️⃣ DO-178C Compliance Requirements
          - [ ] **Traceability Header**: Test file includes proper header with Jira ticket reference
          - [ ] **LLR Linkage**: Traceability to Low Level Requirements documented
          - [ ] **Expected Results**: Expected outcomes are explicitly defined for each test
          - [ ] **Test Type**: Correctly identified as LLTC in documentation
          - [ ] **Formal Review**: This review satisfies formal review requirements
          - [ ] **Audit Trail**: Sufficient documentation for certification audit
          
          #### 4️⃣ Code Quality & Standards
          - [ ] **Coding Standards**: Test code follows company software coding standards (SCS)
          - [ ] **Readability**: Code is clear, well-commented, and maintainable
          - [ ] **No Code Smells**: No obvious code quality issues (duplication, complexity, etc.)
          - [ ] **Imports Correct**: All imports are valid and necessary
          - [ ] **No Linter Errors**: Code passes linting checks
          - [ ] **Type Safety**: TypeScript types are correct and meaningful (if applicable)
          
          #### 5️⃣ Safety & Aerospace Standards
          - [ ] **Deterministic**: Test execution is deterministic (no random behavior)
          - [ ] **No Timing Dependencies**: Tests don't rely on timing or race conditions
          - [ ] **Resource Cleanup**: Proper setup/teardown and resource management
          - [ ] **No Security Issues**: No hardcoded credentials or security vulnerabilities
          - [ ] **Appropriate Scope**: Test scope is appropriate for LLTC (unit level)
          
          ---
          
          ### ✅ Test Execution Status
          
          **Latest CI Test Run:** ${{ steps.test.outputs.test_status }}
          
          $(if [ "${{ steps.test.outputs.test_status }}" == "passed" ]; then
            echo "✅ All tests passing in CI"
          else
            echo "❌ Tests failing in CI - review test output before approving"
          fi)
          
          ---
          
          ### 📖 Review Process
          
          1. **Clone the branch** and run tests locally
          2. **Review the test code** line by line
          3. **Check all checklist items** above
          4. **Verify traceability** to requirements in your traceability tool
          5. **Run coverage analysis** to verify coverage claims
          6. **Document review findings** in PR comments
          7. **Request changes** if any issues found, OR
          8. **Approve the PR** only if all checklist items pass
          
          ---
          
          ### 🚀 After Approval
          
          Once approved:
          1. Test will be merged to `to-be-reviewed-tests` branch
          2. Test becomes part of the reviewed test suite
          3. Periodic batch merge to `main` with additional approval
          4. Test becomes part of certification basis
          
          ---
          
          ### 📚 Reference Documentation
          
          - **Standard:** DO-178C Software Considerations in Airborne Systems and Equipment Certification
          - **Section:** § 6.4 Software Testing Process
          - **Guideline:** DO-326A/ED-202A (Airworthiness Security Process)
          - **Test Type:** LLTC (Low Level Test Case) per DO-178C § 6.4.4.2
          
          ---
          
          ### ⚠️ Important Notes
          
          - **No shortcuts**: All checklist items must be verified
          - **Document findings**: Leave comments on specific lines if issues found
          - **Request changes**: Don't approve if any item fails
          - **Audit evidence**: This review is part of certification documentation
          - **Safety critical**: Test quality directly impacts flight safety
          
          ---
          
          *This checklist is mandatory for DO-178C LLTC approval.*
          *Review must be performed by a qualified test engineer.*
          EOF
            
            gh pr comment ${{ github.event.pull_request.number }} --body-file /tmp/review_comment.md
            echo "✅ Posted review checklist comment"
          else
            echo "✅ Review checklist comment already exists"
          fi

      - name: Check PR Branch Protection Compliance
        run: |
          echo "=== Verifying Branch Protection ==="
          echo "Target branch: to-be-reviewed-tests"
          echo "Auto-merge should be disabled"
          echo "Review requirements should be enforced"
          echo "✅ Enforcement checks complete"

      - name: Post Test Failure Warning
        if: steps.test.outputs.test_status == 'failed'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body "## ⚠️ Test Verification Failed

          The automated test verification in CI has failed. 
          
          **This PR should NOT be approved until tests pass.**
          
          Please review the test execution logs and fix any issues before requesting approval.
          
          Test output available in the CI logs.
          
          ---
          *Automated by Test Review Enforcement*"

      - name: Create Status Summary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "=== Test Review Enforcement Summary ==="
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Target Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Source Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Auto-Merge: Disabled ✅"
          echo "Review Checklist: Posted ✅"
          echo "Test Status: ${{ steps.test.outputs.test_status }}"
          echo "Labels: ${{ join(github.event.pull_request.labels.*.name, ', ') }}"
          echo "======================================="
          echo "✅ Review enforcement complete"

